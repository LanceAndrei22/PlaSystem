package plasystem_functions;

import javax.swing.*;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

/**
 * Utility class for generating inventory reports in CSV format for the PlaSystem application.
 * The report includes product details and highlights low stock items, saving the output to a
 * timestamped file in the "inventory_reports" directory.
 */
public class InventoryReportGenerator {
    /** Directory path where inventory reports are saved. */
    private static final String REPORTS_DIRECTORY = "inventory_reports";

    /** List of products to include in the report. */
    private final List<ProductData> productList;

    /** Column headers for the CSV report. */
    private final String[] HEADERS = {"ID", "Name", "Brand", "Size", "Type", "Price", "Quantity", "Restock Value"};

    /**
     * Constructs an InventoryReportGenerator with the specified list of products.
     *
     * @param productList The list of products to include in the report. Must not be null.
     * @throws NullPointerException if productList is null.
     */
    public InventoryReportGenerator(List<ProductData> productList) {
        this.productList = productList;
    }

    /**
     * Generates a CSV inventory report after prompting the user for confirmation. If confirmed,
     * the report is saved in the "inventory_reports" directory with a timestamped filename
     * (e.g., InventoryReport_YYYY-MM-DD_HHMMSS.csv). Displays a success or error message to the user.
     *
     * @param parent The parent JFrame for displaying confirmation and result dialogs. May be null
     *               if no parent is required.
     */
    public void generateReport(JFrame parent) {
        // Prompt user to confirm export
        int choice = JOptionPane.showConfirmDialog(
                parent,
                "Do you want to export the inventory report as a CSV file?",
                "Export Inventory Report",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE
        );

        if (choice != JOptionPane.YES_OPTION) {
            return; // User cancelled or selected No
        }

        // Create inventory_reports directory if it doesn't exist
        File reportsDir = new File(REPORTS_DIRECTORY);
        if (!reportsDir.exists()) {
            reportsDir.mkdirs();
        }

        // Generate filename with specific format: InventoryReport_YYYY-MM-DD_HHMMSS
        String timestamp = new SimpleDateFormat("yyyy-MM-dd_HHmmss").format(new Date());
        String filePath = REPORTS_DIRECTORY + "/InventoryReport_" + timestamp + ".csv";

        try {
            generateCSVReport(filePath);
            JOptionPane.showMessageDialog(parent,
                    "Report generated successfully at: " + filePath,
                    "Success",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(parent,
                    "Error generating report: " + e.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Generates a CSV report containing inventory data, including a header with metadata and
     * product details. Each row includes product attributes and a "Low Stock" indicator based
     * on the comparison of quantity and restock value.
     *
     * @param filePath The path where the CSV file will be saved. Must not be null or empty.
     * @throws IOException If an error occurs during file writing, such as insufficient permissions
     *                     or disk space issues.
     * @throws NullPointerException If filePath is null.
     */
    private void generateCSVReport(String filePath) throws IOException {
        try (FileWriter writer = new FileWriter(filePath)) {
            // Write header
            writer.write("Inventory Report\n");
            writer.write("Generated by PlaSystem\n");
            writer.write("Total Different Products: " + productList.size() + "\n\n");

            // Write column headers
            writer.write(String.join(",", HEADERS) + ",Low Stock\n");

            // Write data rows
            for (ProductData product : productList) {
                String[] row = {
                        String.valueOf(product.getProductId()),
                        product.getProductName(),
                        product.getProductBrand(),
                        product.getProductSize(),
                        product.getProductType(),
                        String.valueOf(product.getProductPrice()), // Plain double representation
                        String.valueOf(product.getProductQuantity()),
                        String.valueOf(product.getProductRestockValue()),
                        product.getProductQuantity() <= product.getProductRestockValue() ? "Yes" : "No"
                };
                writer.write(String.join(",", row) + "\n");
            }
        }
    }
}