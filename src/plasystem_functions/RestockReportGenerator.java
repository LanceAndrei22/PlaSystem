package plasystem_functions;

import javax.swing.*;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

/**
 * Utility class for generating restock reports in CSV format for the PlaSystem application.
 * The report includes details of restock events and their associated items, saved to a
 * timestamped file in the "restock_reports" directory.
 */
public class RestockReportGenerator {
    /** Directory path where restock reports are saved. */
    private static final String REPORTS_DIRECTORY = "restock_reports";
    
    /** List of restock events to include in the report. */
    private final List<RestockData> restockList;
    
    /** Column headers for the CSV report, combining restock and item details. */
    private static final String[] COMBINED_HEADERS = {
        "Restock ID", "Date", "Time",
        "Product Name", "Brand", "Size", "Type", "Price", "Restocked Quantity"
    };

    /**
     * Constructs a RestockReportGenerator with the specified list of restock events.
     *
     * @param restockList The list of restock events to include in the report. Must not be null.
     * @throws NullPointerException if restockList is null.
     */
    public RestockReportGenerator(List<RestockData> restockList) {
        this.restockList = restockList;
    }

    /**
     * Generates a CSV restock report after prompting the user for confirmation. If confirmed,
     * the report is saved in the "restock_reports" directory with a timestamped filename
     * (e.g., RestockReport_YYYY-MM-DD_HHMMSS.csv). Displays a success or error message to the user.
     *
     * @param parent The parent JFrame for displaying confirmation and result dialogs. May be null
     *               if no parent is required.
     */
    public void generateReport(JFrame parent) {
        // Prompt user to confirm export
        int choice = JOptionPane.showConfirmDialog(
            parent,
            "Do you want to export the restock report as a CSV file?",
            "Export Restock Report",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.QUESTION_MESSAGE
        );

        if (choice != JOptionPane.YES_OPTION) {
            return; // User cancelled or selected No
        }

        // Create restock_reports directory if it doesn't exist
        File reportsDir = new File(REPORTS_DIRECTORY);
        if (!reportsDir.exists()) {
            reportsDir.mkdirs();
        }

        // Generate filename with specific format: RestockReport_YYYY-MM-DD_HHMMSS
        String timestamp = new SimpleDateFormat("yyyy-MM-dd_HHmmss").format(new Date());
        String filePath = REPORTS_DIRECTORY + "/RestockReport_" + timestamp + ".csv";

        try {
            generateCSVReport(filePath);
            JOptionPane.showMessageDialog(parent,
                "Report generated successfully at: " + filePath,
                "Success",
                JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(parent,
                "Error generating report: " + e.getMessage(),
                "Error",
                JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Generates a CSV report containing restock event data and their associated items in a
     * flattened format. Each row represents a restock item with its restock event details.
     * Includes a header with metadata and column names.
     *
     * @param filePath The path where the CSV file will be saved. Must not be null or empty.
     * @throws IOException If an error occurs during file writing, such as insufficient permissions
     *                     or disk space issues.
     * @throws NullPointerException If filePath is null or if restockList or any restock item's
     *                              attributes are null.
     */
    private void generateCSVReport(String filePath) throws IOException {
        try (FileWriter writer = new FileWriter(filePath)) {
            // Write header
            writer.write("Restock Report\n");
            writer.write("Generated by PlaSystem\n");
            writer.write("Total Different Restocks: " + restockList.size() + "\n\n");

            // Write combined headers
            writer.write(String.join(",", COMBINED_HEADERS) + "\n");

            // Write data rows
            for (RestockData restock : restockList) {
                // For each restock event, write a row for each of its items
                for (RestockItemData item : restock.getRestockItems()) {
                    String[] row = {
                        String.valueOf(restock.getRestockId()),
                        restock.getRestockDateYear() + "-" + restock.getRestockDateMonth() + "-" + restock.getRestockDateDay(),
                        restock.getRestockDateTime(),
                        item.getRI_productName(),
                        item.getRI_productBrand(),
                        item.getRI_productSize(),
                        item.getRI_productType(),
                        String.valueOf(item.getRI_productPrice()),
                        String.valueOf(item.getRI_restockedQuantity())
                    };
                    writer.write(String.join(",", row) + "\n");
                }
            }
        }
    }
}