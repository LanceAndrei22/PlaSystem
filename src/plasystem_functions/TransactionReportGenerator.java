package plasystem_functions;

import javax.swing.*;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

/**
 * Handles the generation of transaction reports in CSV format, including transaction details and their items.
 */
public class TransactionReportGenerator {
    private static final String REPORTS_DIRECTORY = "transaction_reports";
    private final List<TransactionData> transactionList;
    private static final String[] COMBINED_HEADERS = {
        "Transaction ID", "Date", "Time", "Total Amount", "Payment Amount", "Change Amount",
        "Product Name", "Brand", "Size", "Type", "Buy Quantity", "Unit Price", "Total Price"
    };

    /**
     * Constructor initializing the transaction list for report generation.
     *
     * @param transactionList The list of transactions to include in the report.
     */
    public TransactionReportGenerator(List<TransactionData> transactionList) {
        this.transactionList = transactionList;
    }

    /**
     * Generates a CSV transaction report after prompting the user for confirmation.
     *
     * @param parent The parent JFrame for displaying dialogues.
     */
    public void generateReport(JFrame parent) {
        // Prompt user to confirm export
        int choice = JOptionPane.showConfirmDialog(
            parent,
            "Do you want to export the transaction report as a CSV file?",
            "Export Transaction Report",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.QUESTION_MESSAGE
        );

        if (choice != JOptionPane.YES_OPTION) {
            return; // User cancelled or selected No
        }

        // Create transaction_reports directory if it doesn't exist
        File reportsDir = new File(REPORTS_DIRECTORY);
        if (!reportsDir.exists()) {
            reportsDir.mkdirs();
        }

        // Generate filename with specific format: TransactionReport_YYYY-MM-DD_HHMMSS
        String timestamp = new SimpleDateFormat("yyyy-MM-dd_HHmmss").format(new Date());
        String filePath = REPORTS_DIRECTORY + "/TransactionReport_" + timestamp + ".csv";

        try {
            generateCSVReport(filePath);
            JOptionPane.showMessageDialog(parent,
                "Report generated successfully at: " + filePath,
                "Success",
                JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(parent,
                "Error generating report: " + e.getMessage(),
                "Error",
                JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Generates a CSV report with transaction data and their items in a flattened format.
     *
     * @param filePath The path where the CSV file will be saved.
     * @throws IOException If an error occurs during file writing.
     */
    private void generateCSVReport(String filePath) throws IOException {
        try (FileWriter writer = new FileWriter(filePath)) {
            // Write header
            writer.write("Transaction Report\n");
            writer.write("Generated by PlaSystem\n");
            writer.write("Total Different Transactions: " + transactionList.size() + "\n\n");

            // Write combined headers
            writer.write(String.join(",", COMBINED_HEADERS) + "\n");

            // Write data rows
            for (TransactionData transaction : transactionList) {
                // For each transaction, write a row for each of its items
                for (TransactionItemData item : transaction.getTransactionItems()) {
                    String[] row = {
                        String.valueOf(transaction.getTransactionId()),
                        transaction.getFormattedDate().split(" ")[0], // YYYY-MM-DD
                        transaction.getTransDateTime(),
                        String.valueOf(transaction.getTotalAmount()),
                        String.valueOf(transaction.getPaymentAmount()),
                        String.valueOf(transaction.getChangeAmount()),
                        item.getTI_productName(),
                        item.getTI_productBrand(),
                        item.getTI_productSize(),
                        item.getTI_productType(),
                        String.valueOf(item.getTI_buyQuantity()),
                        String.valueOf(item.getTI_unitPrice()),
                        String.valueOf(item.getTI_totalPrice())
                    };
                    writer.write(String.join(",", row) + "\n");
                }
            }
        }
    }
}