package plasystem_gui;

import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import plasystem_functions.UserAccountData;
import plasystem_functions.UserAccountDataManager;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import javax.swing.RowFilter;
import java.util.List;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Supplier;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

public class UserAccountsGUI extends javax.swing.JFrame {
    private final UserAccountDataManager userAccountDataModel;
    private final TableRowSorter<DefaultTableModel> tableSorter; // Store the tableSorter for reuse
    // List to track open child GUIs
    private final List<JFrame> childGUIs = new ArrayList<>();
    // Map to track instances of active GUIs
    private final Map<Class<? extends JFrame>, JFrame> activeGUIs = new HashMap<>();

    public UserAccountsGUI(UserAccountDataManager userAccountDataManager) {
        this.userAccountDataModel = userAccountDataManager;
        initComponents();
        setLocationRelativeTo(null); // Set the window to open in the center of the screen
        userAccountDataManager.loadUserAccounts();  // Load user accounts from DB
        loadUserAccountsTable();
        
        // Initialize the TableRowSorter
        DefaultTableModel model = (DefaultTableModel) userAccountsTable.getModel();
        tableSorter = new TableRowSorter<>(model);
        userAccountsTable.setRowSorter(tableSorter);
    }
    
    // Method to add a child GUI to the tracking list
    public void addChildGUI(JFrame child) {
        childGUIs.add(child);
    }

    // Method to remove a child GUI from the tracking list
    public void removeChildGUI(JFrame child) {
        childGUIs.remove(child);
    }
    
    /**
     * Launches or focuses a single instance of a GUI.
     *
     * @param guiClass The class of the GUI to launch.
     * @param creator  A lambda to create a new instance of the GUI if needed.
     * @return The GUI instance.
     */
    private <T extends JFrame> T launchSingleInstance(Class<T> guiClass, Supplier<T> creator) {
        JFrame existingInstance = activeGUIs.get(guiClass);
        if (existingInstance != null && !existingInstance.isDisplayable()) {
            activeGUIs.remove(guiClass); // Remove disposed instance
            existingInstance = null;
        }

        if (existingInstance != null) {
            JOptionPane.showMessageDialog(
                existingInstance,
                "Only one instance can be present.",
                "Instance Warning",
                JOptionPane.WARNING_MESSAGE
            );
            existingInstance.requestFocus();
            existingInstance.setVisible(true);
            return guiClass.cast(existingInstance);
        }

        T newInstance = creator.get();
        newInstance.setVisible(true);
        newInstance.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        newInstance.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent e) {
                activeGUIs.remove(guiClass);
                removeChildGUI(newInstance);
            }
        });
        activeGUIs.put(guiClass, newInstance);
        addChildGUI(newInstance);
        return newInstance;
    }
    
    // Override dispose to close all child windows
    @Override
    public void dispose() {
        // Close all child windows
        for (JFrame child : new ArrayList<>(childGUIs)) {
            child.dispose();
        }
        childGUIs.clear(); // Clear the list
        super.dispose(); // Call parent dispose
    }
    
    // Method to load user accounts into the JTable
    private void loadUserAccountsTable() {
        List<UserAccountData> userList = userAccountDataModel.getUserAccounts();  // Get the list of user accounts
        DefaultTableModel model = (DefaultTableModel) userAccountsTable.getModel();
        model.setRowCount(0); // Clear existing rows

        // Add each user to the table
        for (UserAccountData user : userList) {
            model.addRow(new Object[] {
                user.getUsername(),
                user.getUserPassword(),
                user.getUserRole()
            });
        }
    }
    
    // Method to refresh the table
    public void refreshTable() {
        loadUserAccountsTable();
        // Reapply the current filter if any
        if (searchTxtField.getText().trim().length() > 0) {
            searchTxtFieldKeyReleased(null);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        userAccScrollPane = new javax.swing.JScrollPane();
        userAccountsTable = new javax.swing.JTable();
        Design = new javax.swing.JLabel();
        editUserActBtn = new javax.swing.JButton();
        addUserActBtn = new javax.swing.JButton();
        deleteUserActBtn = new javax.swing.JButton();
        searchPanel = new javax.swing.JPanel();
        searchTxtField = new javax.swing.JTextField();
        searchPrmtrBox = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        userAccountsTable.setAutoCreateRowSorter(true);
        userAccountsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Username", "Password", "Role"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        userAccountsTable.getTableHeader().setReorderingAllowed(false);
        userAccScrollPane.setViewportView(userAccountsTable);

        Design.setBackground(new java.awt.Color(255, 204, 102));
        Design.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Design.setIcon(new javax.swing.ImageIcon(getClass().getResource("/plasystem_resources/userrolestitle.png"))); // NOI18N
        Design.setOpaque(true);

        editUserActBtn.setText("Edit");
        editUserActBtn.setInheritsPopupMenu(true);
        editUserActBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editUserActBtnActionPerformed(evt);
            }
        });

        addUserActBtn.setText("Add");
        addUserActBtn.setInheritsPopupMenu(true);
        addUserActBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addUserActBtnActionPerformed(evt);
            }
        });

        deleteUserActBtn.setBackground(new java.awt.Color(255, 102, 102));
        deleteUserActBtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        deleteUserActBtn.setForeground(new java.awt.Color(255, 255, 255));
        deleteUserActBtn.setText("Delete");
        deleteUserActBtn.setInheritsPopupMenu(true);
        deleteUserActBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteUserActBtnActionPerformed(evt);
            }
        });

        searchPanel.setOpaque(false);

        searchTxtField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchTxtFieldKeyReleased(evt);
            }
        });

        searchPrmtrBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Username", "Password", "Role" }));

        javax.swing.GroupLayout searchPanelLayout = new javax.swing.GroupLayout(searchPanel);
        searchPanel.setLayout(searchPanelLayout);
        searchPanelLayout.setHorizontalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addComponent(searchTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchPrmtrBox, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        searchPanelLayout.setVerticalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(searchTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchPrmtrBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(userAccScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 480, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(editUserActBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addUserActBtn))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(searchPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(deleteUserActBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(Design, javax.swing.GroupLayout.DEFAULT_SIZE, 480, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(99, 99, 99)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(searchPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteUserActBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(userAccScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editUserActBtn)
                    .addComponent(addUserActBtn))
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(Design, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 446, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addUserActBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addUserActBtnActionPerformed
        launchSingleInstance(AddUserAccountGUI.class, () -> {
            AddUserAccountGUI addUserActGUI = new AddUserAccountGUI(this, userAccountDataModel);
            addUserActGUI.pack();
            addUserActGUI.setLocationRelativeTo(null);
            addUserActGUI.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            return addUserActGUI;
        });
    }//GEN-LAST:event_addUserActBtnActionPerformed

    private void deleteUserActBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteUserActBtnActionPerformed
        int selectedRow = userAccountsTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, 
                "Please select a user to delete.",
                "Selection Error", 
                JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Convert view row index to model row index to handle sorting
        int modelRow = userAccountsTable.convertRowIndexToModel(selectedRow);

        // Get the username from the selected row (column 0)
        String username = (String) userAccountsTable.getModel().getValueAt(modelRow, 0);

        // Prevent admin from deleting their own account
        if ("admin".equals(userAccountDataModel.getLoggedInRole()) && 
            username.equals(userAccountDataModel.getLoggedInUsername())) {
            JOptionPane.showMessageDialog(this, 
                "You cannot delete your own account.",
                "Permission Error", 
                JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Confirm deletion
        int confirm = JOptionPane.showConfirmDialog(this, 
            "Are you sure you want to delete the user '" + username + "'?",
            "Confirm Delete", 
            JOptionPane.YES_NO_OPTION, 
            JOptionPane.WARNING_MESSAGE);
        
        if (confirm == JOptionPane.YES_OPTION) {
            boolean success = userAccountDataModel.deleteUserAccount(username);
            if (success) {
                JOptionPane.showMessageDialog(this, 
                    "User account deleted successfully!",
                    "Success", 
                    JOptionPane.INFORMATION_MESSAGE);
                refreshTable(); // Refresh the table
            }
        }
    }//GEN-LAST:event_deleteUserActBtnActionPerformed

    private void editUserActBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editUserActBtnActionPerformed
        int selectedRow = userAccountsTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, 
                "Please select a user to edit.",
                "Selection Error", 
                JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Convert view row index to model row index to handle sorting
        int modelRow = userAccountsTable.convertRowIndexToModel(selectedRow);

        // Get the username from the selected row
        String username = (String) userAccountsTable.getModel().getValueAt(modelRow, 0);

        // Prevent admin from editing their own account
        if ("admin".equals(userAccountDataModel.getLoggedInRole()) && 
            username.equals(userAccountDataModel.getLoggedInUsername())) {
            JOptionPane.showMessageDialog(this, 
                "You cannot edit your own account.",
                "Permission Error", 
                JOptionPane.ERROR_MESSAGE);
            return;
        }

        UserAccountData selectedUser = userAccountDataModel.getUserAccounts()
            .stream()
            .filter(user -> user.getUsername().equals(username))
            .findFirst()
            .orElse(null);

        if (selectedUser == null) {
            JOptionPane.showMessageDialog(this, 
                "User data not found.",
                "Data Error", 
                JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Launch EditUserAccountGUI with the selected user's UserAccountData        
        launchSingleInstance(EditUserAccountGUI.class, () -> {
            EditUserAccountGUI editUserActGUI = new EditUserAccountGUI(this, userAccountDataModel, selectedUser);
            editUserActGUI.pack();
            editUserActGUI.setLocationRelativeTo(null);
            editUserActGUI.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            return editUserActGUI;
        });
    }//GEN-LAST:event_editUserActBtnActionPerformed

    private void searchTxtFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchTxtFieldKeyReleased
        String searchText = searchTxtField.getText().trim();
        String columnNameToSearch = searchPrmtrBox.getSelectedItem().toString();
        DefaultTableModel model = (DefaultTableModel) userAccountsTable.getModel();
        
        // Find the column index
        int columnIndex = model.findColumn(columnNameToSearch);
        
        if (columnIndex == -1) {
            JOptionPane.showMessageDialog(this, 
                "Invalid column selected for search.",
                "Search Error", 
                JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Apply the row filter
        if (searchText.isEmpty()) {
            tableSorter.setRowFilter(null); // Clear filter if search text is empty
        } else {
            tableSorter.setRowFilter(RowFilter.regexFilter("(?i)" + searchText, columnIndex));
        }
    }//GEN-LAST:event_searchTxtFieldKeyReleased

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Design;
    private javax.swing.JButton addUserActBtn;
    private javax.swing.JButton deleteUserActBtn;
    private javax.swing.JButton editUserActBtn;
    private javax.swing.JPanel searchPanel;
    private javax.swing.JComboBox<String> searchPrmtrBox;
    private javax.swing.JTextField searchTxtField;
    private javax.swing.JScrollPane userAccScrollPane;
    private javax.swing.JTable userAccountsTable;
    // End of variables declaration//GEN-END:variables
}
